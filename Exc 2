Exercise 2
Questions: 
  String can contain various characters, not only numbers? If we have more substrings of the same length, should we take 
  the first? Are we starting with index 0 or 1? 
Thoughts on the problem: 
  We are looking for the longest subsequence, therefore we can start with the full sequence and cut it down eventually.
  We could use a recursive function to cut a number from one or the other end of original sequence, leaving a sequence shorter
  by one character. We will first cut from the right part of the sequence, to ensure we will have the first palindrome 
  possible. The first palindrome we find is the right one. 
    This goes through all possible subsequences. It will take O(2^n) (See if really? Not if I do it in a clever way. But I
    won't, because it's messy and I have a more elegant solution.)
    This is not the optimal solution. 
  Another approach: We know our palindrome has a middle somewhere. Depending on its length, it can be one character, or it 
  can be two characters (or no character). We can start from the middle of our string and select characters to see, if they
  could be the middle one (all around them have to be mirrored). We have to go through all the characters and keep track of 
  the maximal length. 
    This approach takes O (n^2). 
  
How to improve:
  There are ways to improve this approach but are too complicated or too messy. 
Questions for myself: 
  Could KMP help us? No, probably not. 
Test cases:
  "111111111111183113331" = 0, 13
  "" = 0, 0
  "55555" = 0, 5
  "447123454321" = 3, 9
  "abebabaeva" = 0, 5
Code:
int maxLength=0;
String input;
for(int i=0; i<input-1; i++){
  //for odd-length subsequences
  int j=0;
  while (i-j>=0 && i+j <input && i-j == i+j){
    j++;
  }
  if(j>maxLength){
    maxLength=j;
  }
  //for cases of even length
  j=0;
  while (i-j>=0 && i+j+1 <input && i-j == i+j+1){
    j++;
  }
  if(j>maxLength){
    maxLength=j;
  }
}
