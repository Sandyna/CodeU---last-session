Exercise 1
Questions: 
Thoughts on the problem: 
  I can start with writing down a few numbers to see which of them are palindromes and whether they have something in common. 
  If we are ignoring leading zeroes, palindromes can only be odd numbers. Though not all odd numbers are palindromes. (1101) 
  First obvious approach will be going through all odd numbers, keeping a counter of how many palindromes I have already seen.
  For each n, where n is an odd number, we know that there has been maximum of n/2 palindromes so far. Can we somehow find out
  the minimum of palindromes so far? Can we tell, if given a palindrome, at which position it stands (what was the initial K?)?
  If we are keeping the leading zeroes, and are planning on using the function repeatedly, we can keep a table of numbers and
  the information about them being palindromes. If we then get a new number, we just compare the marginal bits - if they are the 
  same, we will look up the number in between of them and see whether it is a palindrome. The number is smaller, therefore we 
  already have an information about it. (If not, we can always compute it in the same fashion). 
    For example we have table containing numbers and whether they are palindromes: 1 {1}, 10 {0}, 11 {1}, 100 {0}, 101 {1}
    Now we get a new number: 1111. We can see the marginal bits are the same. Then we will look into our table at position 
    where the internal 11 is. We can see there that 11 is a palindrome, therefore our new number is also a palindrome. 
  This is probably not the best solution. 
How to improve:
If I have binary representation of a number, I should be able to say how many palindromes there were before. Using math.
(How many palindromic combinations are there for 1, 2, ..., n bits long number?)
Questions for myself: 
Can we tell, if given a palindrome, at which position it stands (what was the initial K?)? Can we somehow find out the 
minimal amount of palindromes so far? 
Test cases:
1=1
2=10
3=11
4=100
5=101
6=110
7=111
8=1000
9=1001
10=1010
11=1011
12=1100
13=1101
14=1110
15=1111
K(3)=5
K(6)=15
Code:
public int palindrome(int k){
int counter = 0, kthInteger=0;
  while(counter!=k){
    if(isPalindrome(kthInteger)){
      counter++;
    }
    kthInteger++;
  }
}
public boolean isPalindrome (int input) {
  //checks whether it is a palindrome in binary
}
